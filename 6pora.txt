1. Add angular material
https://angular.io/start

2. Add angular-material module
-create material.module.ts
-add it to app.module

3. Add material icons css to style.css

4. Add fonts
- add fonts to assets
- add record to angular.json:
 "styles": [
            "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
            "src/styles.css",
            "src/assets/fonts/caviar/caviar.css"
        ]
- make sure that all fonts are resolved correctly int caviar.css file:
    font-family: 'Caviar Dreams';
    src: local('Caviar Dreams'), local('CaviarDreams'), url('../../../assets/fonts/caviar/caviardreams.woff2') format('woff2'), url('../../../assets/fonts/caviar/caviardreams.woff') format('woff'), url('../../../assets/fonts/caviar/caviardreams.ttf') format('truetype');
    font-weight: 400;
    font-style: normal;
- add record to style.css (or where needed)
* {
    font-family: 'Caviar Dreams', "Roboto", sans-serif;
    font-style: normal;
    font-weight: 700
}

5. Add router module

6. Add @angular/flexlayout (don't forget to add 
import { FlexLayoutModule } from '@angular/flex-layout';

TO ENABLE JSON FILES READING ADD
    "resolveJsonModule": true,
    "esModuleInterop": true
tsconfig.json
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2015",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2018",
      "dom"
    ],
    "resolveJsonModule": true,
    "esModuleInterop": true
  },
  "angularCompilerOptions": {
    "fullTemplateTypeCheck": true,
    "strictInjectionParameters": true
  },
  
}

GETTING BACK TO THE SAME SCROLL LOCATION
In app.component.ts
constructor(
    private location: Location
    ... other stuff
     )
ngOnInit(): void {
      this.location.subscribe((ev: PopStateEvent) => {
        this.lastPoppedUrl = ev.url;
        console.log('LAST POPPED URL', this.lastPoppedUrl);
      });
    
      this.router.events.subscribe((ev: any) => {
        if (ev instanceof NavigationStart) {
          if (ev.url !== this.lastPoppedUrl) {
            this.yScrollStack.push(window.scrollY);
          } else {
            this.lastPoppedUrl = undefined;
            const yposition = this.yScrollStack.pop();
            console.log('Y-POSITION', this.yScrollStack.pop());        
            let maxInterval = 0; // used to stop subscription
            interval(this.scrollInterval)
              .pipe(
                takeWhile(_ => window.scrollY < yposition && maxInterval < 5000)
              )
              .subscribe(_ => {
                maxInterval += this.scrollInterval;
                window.scrollTo({
                  top: yposition,
                  left: 0,
                  behavior: 'smooth',
                });
              });
          }
        }
      });
    }

ИСПОЛЬЗУЙ DynamicScriptLoaderService В КОМПОНЕНТЕ ОТЦЕ!!!
Например, у тебя есть компонент Артикл, который содержит детей Артикл-Видео и Артикл-Музыка.
Тебе нужны скрипты, чтобы что-то делать на уровне детей. НО если ты их загрузишь на уровне детей, то 
на уровне ротиделя скрипты не будут видны - не будут активированны. 
Загрузи их на уровне родителя, тогда дети получат и ним доступ.

Чтобы при переходе с компонента на компонент страница отображалась с самого верху, используй 
scrollPositionRestoration
imports: [
        RouterModule.forRoot(routes, { scrollPositionRestoration: 'enabled' })
    ],

    

    
**Lighthouse Version**: 5.6.0
**Lighthouse Commit**: 848b54397bd062f83d00ac8a87608df8011cf8f1
**Chrome Version**: 76.0.3809.132
**Initial URL**: http://localhost:8080/home
**Error Message**: Couldn't resolve current tab. Check your URL, reload, and try again. Found 1 tab(s) with id(s) [4].
**Stack Trace**:
```
Error: Couldn't resolve current tab. Check your URL, reload, and try again. Found 1 tab(s) with id(s) [4].
    at chrome-extension://blipmdconlkpinefehnmjammfjpmpbjk/scripts/lighthouse-ext-bundle.js:23040:15
```
    ng build --prod --base-href https://wikimodels.github.io/